; Copyright 2018 Justin Hu, Bronwyn Damm, Jacques Marais, Ramon Rakow, and Jude
; Sidloski
;
; This file is part of the StackLang standard library.
;
; The StackLang standard library is free software: you can redistribute it
; and/or modify it under the terms of the GNU Lesser General Public License as
; published by the Free Software Foundation, either version 3 of the License,
; or (at your option) any later version. 
;
; The StackLang standard library is distributed in the hope that it will be
; useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
; General Public License for more details.
;
; You should have received a copy of the GNU Lesser General Public License
; along with the StackLang standard library.  If not, see <https://www.gnu.org/licenses/>.

; StackLang extended substack primitives

<<>> ; -> substack
<<>>
<<
    <<>>
>>
`empty
define

<< Any >> ; -> Boolean
<< `elm >>
<<
    << Any >> ; -> Boolean
    << `ignored >>
    <<
        false
    >>
    `non-empty-other
    define

    << Substack >> ; -> Boolean
    << `elm >>
    <<
        elm
        empty?
        not
    >>
    `non-empty-substack
    define

    elm, elm
    substack?
    `non-empty-substack
    `non-empty-other
    3, rotate
    if
    unquote
>>
`non-empty?
define

<< Substack >> ; -> Any
<< `lst >>
<<
    lst
    pop
    top
>>
`second
define

<< Substack >> ; -> Any
<< `lst >>
<<
    lst
    reverse
    top
>>
`last
define

<< Identifier, Substack(Any) >> ; -> Substack(Any)
<< `fn, `lst >>
<<
    << Substack(Any), Identifier >> ; -> Substack(Any)
    << lst, fn >>
    <<
        lst
        pop*
        2, rotate
        fn
        map
        2, rotate
        fn
        unquote
        push
    >>
    `map-rc
    define

    << Substack(Any), Identifier >> ; -> Substack(Any)
    << `lst, `fn >>
    <<
        lst
    >>
    `map-bc
    define

    fn, lst
    lst
    empty?
    `map-bc
    `map-rc
    3, rotate
    if
    unquote
>>
`map
define

<< Identifier, Substack(Any) >> ; -> Substack(Any)
<< `fn, `lst >>
<<
    << Substack(Any), Identifier >> ; -> Substack(Any)
    << `lst, `fn >>
    <<
        pop*
        fn
        3, rotate
        filter
        2, rotate
        fn
        unquote
        `push
        `drop
        if
        unquote
    >>
    `filter-rc
    define

    << Substack(Any), Identifier >> ; -> Substack(Any)
    << `lst, `fn >>
    <<
        lst
    >>
    `filter-bc
    define

    fn, lst
    lst
    empty?
    `filter-bc
    `filter-rc
    3, rotate
    if
    unquote
>>
`filter
define

<< Identifier, Any, Substack(Any) >> ; -> Any
<< `fn, `init, `lst >>
<<
    << Substack(Any), Identifier, Any >> ; -> Any
    << `lst, `fn, `acc >>
    <<
        lst
        pop*
        2, rotate
        acc
        fn
        foldr
        fn
        unquote
    >>
    `foldr-rc
    define

    << Substack(Any), Identifier, Any >> ; -> Any
    << `lst, `fn, `acc >>
    <<
        acc
    >>
    `foldr-bc
    define

    lst, fn, init
    lst
    empty?
    `foldr-bc
    `foldr-rc
    3, rotate
    if
    unquote
>>
`foldr
define

<< Command, Any, Substack(Any) >> ; -> Any
<< `fn, `acc, `lst >>
<<
    << Substack(Any), Command, Any >> ; -> Any
    << `lst, `fn, `acc >>
    <<
        pop*
        acc
        fn
        unquote
        fn
        foldl
    >>
    `foldl-rc
    define

    << Substack(Any), Command, Any >> ; -> Any
    << `lst, `fn, `acc >>
    <<
        acc
    >>
    `foldl-bc
    define

    lst, fn, acc
    lst
    empty?
    `foldl-bc
    `foldl-rc
    3, rotate
    if
    unquote
>>
`foldl
define


<< Number >> ; -> Substack(Number)
<< `n >>
<<
    << Number, Substack(Number) >> ; -> Substack(Number)
    << `ignore1, `ignore2 >>
    <<
        "Given number is not a non-negative integer.", error
    >>
    `sequence-error
    define

    << Number, Substack(Number) >> ; -> Substack(Number)
    << `n, `rsf >>
    <<
        rsf
        n
        push
        n
        decrement
        sequence-rc
    >>
    `sequence-tr
    define

    << Number, Substack(Number) >> ; -> Substack(Number)
    << `n, `rsf >>
    <<
        rsf, n
        `push
        `sequence-tr
        n
        zero?
        if
        unquote
    >>
    `sequence-rc
    define

    <<>>
    n
    `sequence-rc
    `sequence-error
    n
    integer?
    n
    negative?
    not
    and
    if
    unquote
>>
`sequence
define
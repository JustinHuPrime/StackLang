; Copyright 2018 Justin Hu
;
; This file is part of the StackLang standard library.
;
; The StackLang standard library is free software: you can redistribute it
; and/or modify it under the terms of the GNU Lesser General Public License as
; published by the Free Software Foundation, either version 3 of the License,
; or (at your option) any later version. 
;
; The StackLang standard library is distributed in the hope that it will be
; useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
; General Public License for more details.
;
; You should have received a copy of the GNU Lesser General Public License
; along with the StackLang standard library.  If not, see <https://www.gnu.org/licenses/>.

; StackLang extended substack primitives

<<>> ; -> substack
<<
    <<>>
>>
`empty
define


<< Any >> ; -> Boolean
<<
    duplicate
    substack?
    `non-empty-substack
    `non-empty-other
    3, rotate
    if
    unquote
>>
`non-empty?
define

<< Any >> ; -> Boolean
<<
    drop
    false
>>
`non-empty?
`non-empty-other
define*

<< Substack >> ; -> Boolean
<<
    empty?
    not
>>
`non-empty?
`non-empty-substack
define*


<< Substack >> ; -> Any
<<
    pop
    top
>>
`second
define

<< Substack >> ; -> Any
<<
    reverse
    top
>>
`last
define


<< Command, Substack(Any) >> ; -> Substack(Any)
<<
    2, rotate
    duplicate
    empty?
    `map-bc
    `map-rc
    3, rotate
    if
    unquote
>>
`map
define

<< Substack(Any), Command >> ; -> Substack(Any)
<<
    pop*
    2, rotate
    3, rotate
    duplicate
    3, 2, rotate*
    map
    3, 2, rotate*
    unquote
    push
>>
`map
`map-rc
define*

<< Substack(Any), Command >> ; -> Substack(Any)
<<
    2, rotate
    drop
>>
`map
`map-bc
define*


<< Command, Substack(Any) >> ; -> Substack(Any)
<<
    2, rotate
    duplicate
    empty?
    `filter-bc
    `filter-rc
    3, rotate
    if
    unquote
>>
`filter
define

<< Substack(Any), Command >> ; -> Substack(Any)
<<
    pop*
    2, rotate
    3, rotate
    duplicate
    3, 2, rotate*
    filter
    3, rotate
    duplicate
    4, rotate
    unquote
    `push
    `drop
    3, rotate
    if
    unquote
>>
`filter
`filter-rc
define*

<< Substack(Any), Command >> ; -> Substack(Any)
<<
    2, rotate
    drop
>>
`filter
`filter-bc
define*


<< Command, Any, Substack(Any) >> ; -> Any
<<
    3, rotate
    duplicate
    empty?
    `foldr-bc
    `foldr-rc
    3, rotate
    if
    unquote
>>
`foldr
define

<< Substack(Any), Command, Any >> ; -> Any
<<
    pop*
    2, rotate
    4, 2, rotate*
    duplicate
    4, 3, rotate*
    foldr
    3, 2, rotate*
    unquote
>>
`foldr
`foldr-rc
define*

<< Substack(Any), Command, Any >> ; -> Any
<<
    2, drop*
>>
`foldr
`foldr-bc
define*


; !!! foldl goes here


<< Number >> ; -> Substack(Number)
<<
    <<>>
    2, rotate
    duplicate
    integer?
    2, rotate
    duplicate
    negative?
    not
    3, rotate
    and
    `sequence-rc
    `sequence-error
    3, rotate
    if
    unquote
>>
`sequence
define

<< Number, Substack(Number) >> ; -> Substack(Number)
<<
    2, drop*
    "Given number is not a non-negative integer.", error
>>
`sequence
`sequence-error
define*

; current list
<< Number, Substack(Number) >> ; -> Substack(Number)
<<
    duplicate
    zero?
    `push
    `sequence-tr
    3, rotate
    if
    unquote
>>
`sequence-rc
define

<< Number, Substack(Number) >> ; -> Substack(Number)
<<
    duplicate
    decrement
    3, 2, rotate*
    push
    2, rotate
    sequence-rc
>>
`sequence-rc
`sequence-tr
define*
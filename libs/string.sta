; Copyright 2018 Justin Hu, Bronwyn Damm, Jacques Marais, Ramon Rakow, and Jude
; Sidloski
;
; This file is part of the StackLang standard library.
;
; The StackLang standard library is free software: you can redistribute it
; and/or modify it under the terms of the GNU Lesser General Public License as
; published by the Free Software Foundation, either version 3 of the License,
; or (at your option) any later version. 
;
; The StackLang standard library is distributed in the hope that it will be
; useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
; General Public License for more details.
;
; You should have received a copy of the GNU Lesser General Public License
; along with the StackLang standard library.  If not, see <https://www.gnu.org/licenses/>.

; StackLang extended string primitives

<< Any >> ; -> Boolean
<< `elm >>
<<
    << Any >> ; -> Boolean
    <<
        drop
        false
    >>
    `non-empty-string-other
    define

    << String >> ; -> Boolean
    <<
        empty-string?
        not
    >>
    `non-empty-string-string
    define

    elm, elm
    string?
    `non-empty-string-string
    `non-empty-string-other
    3, rotate
    if
    unquote
>>
`non-empty-string?
define

<< String, Number, String >> ; -> String
<< `to-insert, `index, `target >>
<<
    target
    index
    0
    substring
    target
    target
    string-length
    index
    substring
    to-insert
    2, rotate
    string-append
    string-append
>>
`string-insert
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a, b
    string-equal?
    not
>>
`string-not-equal?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a, b
    string-reverse-alphabetic?
    not
>>
`string-alphabetic-equal?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a, b
    string-alphabetic?
    not
>>
`string-reverse-alphabetic-equal?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a
    toupper
    b
    toupper
    string-equal?
>>
`string-equal-ci?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a, b
    string-equal-ci?
    not
>>
`string-not-equal-ci?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a
    toupper
    b
    toupper
    string-reverse-alphabetic-equal?
>>
`string-alphabetic-ci?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a, b
    string-reverse-alphabetic-ci?
    not
>>
`string-alphabetic-equal-ci?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a
    toupper
    b
    toupper
    string-alphabetic-equal?
>>
`string-reverse-alphabetic-ci?
define

<< String, String >> ; -> String
<< `a, `b >>
<<
    a, b
    string-alphabetic-ci?
    not
>>
`string-reverse-alphabetic-equal-ci?
define
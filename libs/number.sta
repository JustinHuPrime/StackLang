; Copyright 2018 Justin Hu, Bronwyn Damm, Jacques Marais, Ramon Rakow, and Jude
; Sidloski
;
; This file is part of the StackLang standard library.
;
; The StackLang standard library is free software: you can redistribute it
; and/or modify it under the terms of the GNU Lesser General Public License as
; published by the Free Software Foundation, either version 3 of the License,
; or (at your option) any later version. 
;
; The StackLang standard library is distributed in the hope that it will be
; useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
; General Public License for more details.
;
; You should have received a copy of the GNU Lesser General Public License
; along with the StackLang standard library.  If not, see <https://www.gnu.org/licenses/>.

; StackLang extended number primitives

<< Any >> ; -> Boolean
<<
    duplicate
    number?
    `integer-number
    `integer-other
    3, rotate
    if
    unquote
>>
`integer?
define

<< Any >> ; -> Boolean
<<
    drop
    false
>>
`integer?
`integer-other
define*

<< Number >> ; -> Boolean
<<
    1, modulo
    zero?
>>
`integer?
`integer-number
define*


<< Any >> ; -> Boolean
<<
    duplicate
    number?
    `zero-number
    `zero-other
    3, rotate
    if
    unquote
>>
`zero?
define

<< Any >> ; -> Boolean
<<
    drop
    false
>>
`zero?
`zero-other
define*

<< Number >> ; -> Boolean
<<
    0
    equal?
>>
`zero?
`zero-number
define*


<< Any >> ; -> Boolean
<<
    duplicate
    number?
    `positive-number
    `positive-other
    3, rotate
    if
    unquote
>>
`positive?
define

<< Any >> ; -> Boolean
<<
    drop
    false
>>
`positive?
`positive-other
define*

<< Number >> ; -> Boolean
<<
    0
    greater-than?
>>
`positive?
`positive-number
define*


<< Any >> ; -> Boolean
<<
    duplicate
    duplicate
    number?
    2, rotate
    positive?
    not
    3, rotate
    zero?
    not
    and
    and
>>
`negative?
define


<< Any >> ; -> Boolean
<<
    duplicate
    integer?
    `even-integer
    `even-other
    3, rotate
    if
    unquote
>>
`even?
define

<< Any >> ; -> Boolean
<<
    drop
    false
>>
`even?
`even-other
define*

<< Number >> ; -> Boolean
<<
    2, modulo
    zero?
>>
`even?
`even-integer
define*


<< Any >> ; -> Boolean
<<
    duplicate
    duplicate
    integer?
    2, rotate
    even?
    not
    3, rotate
    zero?
    not
    and
    and
>>
`odd?
define


<< Number >> ; -> Number
<<
    0
    2, rotate
    minus
>>
`negate
define

<< Number >> ; -> Number
<<
    1
    2, rotate
    divide
>>
`inverse
define


<< Number >> ; -> Number
<<
    1
    add
>>
`increment
define

<< Number >> ; -> Number
<<
    1
    subtract
>>
`decrement
define


<< Number >> ; -> Number
<<
    0.5
    pow
>>
`sqrt
define

<< Number >> ; -> Number
<<
    euler
    2, rotate
    pow
>>
`exponential
define


<< Number >> ; -> Number
<<
    euler
    log
>>
`log-e
define

<< Number >> ; -> Number
<<
    10
    log
>>
`log-10
define

<< Number >> ; -> Number
<<
    2
    log
>>
`log-2
define


<< Number >> ; -> Number
<<
    1
    2, rotate
    factorial-rc
>>
`factorial
define

<< Number, Number >> ; -> Number
<<
    duplicate
    positive?
    `factorial-tr
    `factorial-bc
    3, rotate
    if
    unquote
>>
`factorial-rc
define

<< Number, Number >> ; -> Number
<<
    duplicate
    decrement
    3, 2, rotate*
    multiply
    2, rotate
    factorial-rc
>>
`factorial-rc
`factorial-tr
define*

<< Number, Number >> ; -> Number
<<
    drop
>>
`factorial-rc
`factorial-bc
define*


<< Number, Number >> ; -> Boolean
<<
    equal?
    not
>>
`not-equal?
define

<< Number, Number >> ; -> Boolean
<<
    greater-than?
    not
>>
`less-than-equal?
define

<< Number, Number >> ; -> Boolean
<<
    less-than?
    not
>>
`greater-than-equal?
define


<< Number >> ; -> Number
<<
    180
    divide
    pi
    multiply
>>
`degrees-to-radians
define

<< Number >> ; -> Number
<<
    pi
    divide
    180
    multiply
>>
`radians-to-degrees
define
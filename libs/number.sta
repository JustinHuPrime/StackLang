; Copyright 2018 Justin Hu, Bronwyn Damm, Jacques Marais, Ramon Rakow, and Jude
; Sidloski
;
; This file is part of the StackLang standard library.
;
; The StackLang standard library is free software: you can redistribute it
; and/or modify it under the terms of the GNU Lesser General Public License as
; published by the Free Software Foundation, either version 3 of the License,
; or (at your option) any later version. 
;
; The StackLang standard library is distributed in the hope that it will be
; useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
; General Public License for more details.
;
; You should have received a copy of the GNU Lesser General Public License
; along with the StackLang standard library.  If not, see <https://www.gnu.org/licenses/>.

; StackLang extended number primitives

<< Any >> ; -> Boolean
<< `elm >>
<<
    << Any >> ; -> Boolean
    << `ignored >>
    <<
        false
    >>
    `integer-other
    define

    << Number >> ; -> Boolean
    << `num >>
    <<
        num
        1, modulo
        zero?
    >>
    `integer-number
    define

    elm, elm
    number?
    `integer-number
    `integer-other
    3, rotate
    if
    unquote
>>
`integer?
define

<< Any >> ; -> Boolean
<< `elm >>
<<
    << Any >> ; -> Boolean
    << `ignored >>
    <<
        false
    >>
    `zero-other
    define

    << Number >> ; -> Boolean
    << `num >>
    <<
        num
        0
        equal?
    >>
    `zero-number
    define

    elm, elm
    number?
    `zero-number
    `zero-other
    3, rotate
    if
    unquote
>>
`zero?
define

<< Any >> ; -> Boolean
<< `elm >>
<<
    << Any >> ; -> Boolean
    << `ignored >>
    <<
        false
    >>
    `positive-other
    define

    << Number >> ; -> Boolean
    << `num >>
    <<
        num
        0, greater-than?
    >>
    `positive-number
    define

    elm, elm
    number?
    `positive-number
    `positive-other
    3, rotate
    if
   unquote
>>
`positive?
define

<< Any >> ; -> Boolean
<< `elm >>
<<
    elm, elm, elm
    number?
    2, rotate
    positive?
    not
    3, rotate
    zero?
    not
    and
    and
>>
`negative?
define

<< Any >> ; -> Boolean
<< `elm >>
<<
    << Any >> ; -> Boolean
    << `ignored >>
    <<
        false
    >>
    `even-other
    define

    << Number >> ; -> Boolean
    << `num >>
    <<
        num
        2, modulo
        zero?
    >>
    `even-integer
   define

    elm, elm
    integer?
    `even-integer
    `even-other
    3, rotate
    if
    unquote
>>
`even?
define

<< Any >> ; -> Boolean
<< `elm >>
<<
    elm, elm, elm
    integer?
    2, rotate
    even?
    not
    3, rotate
    zero?
    not
    and
    and
>>
`odd?
define

<< Number >> ; -> Number
<< `num >>
<<
    0
    num
    subtract
>>
`negate
define

<< Number >> ; -> Number
<< `num >>
<<
    1
    num
    divide
>>
`inverse
define

<< Number >> ; -> Number
<< `num >>
<<
    num
    1
    add
>>
`increment
define

<< Number >> ; -> Number
<< `num >>
<<
    num
    1
    subtract
>>
`decrement
define

<< Number >> ; -> Number
<< `num >>
<<
    num
    0.5
    pow
>>
`sqrt
define

<< Number >> ; -> Number
<< `num >>
<<
    euler
    num
    pow
>>
`exponential
define

<< Number >> ; -> Number
<< `num >>
<<
    num
    euler
    log
>>
`log-e
define

<< Number >> ; -> Number
<< `num >>
<<
    num
    10
    log
>>
`log-10
define

<< Number >> ; -> Number
<< `num >>
<<
    num
    2
    log
>>
`log-2
define

<< Number >> ; -> Number
<< `num >>
<<
        << Number, Number >> ; -> Number
        << `curr, `rsf >>
        <<
            << Number, Number >> ; -> Number
            << `curr, `rsf >>
            <<
                curr
                rsf
                multiply
                rsf
                decrement
                factorial-rc
            >>
            `factorial-tr
            define

            << Number, Number >> ; -> Number
            << `curr, `rsf >>
            <<
                rsf
            >>
            `factorial-bc
            define

            curr, rsf
            rsf
            positive?
            `factorial-tr
            `factorial-bc
            3, rotate
            if
            unquote
        >>
        `factorial-rc
        define

    1
    num
    factorial-rc
>>
`factorial
define

<< Number, Number >> ; -> Boolean
<< `a, `b >>
<<
    a, b
    equal?
    not
>>
`not-equal?
define

<< Number, Number >> ; -> Boolean
<< `a, `b >>
<<
    a, b
    greater-than?
    not
>>
`less-than-equal?
define

<< Number, Number >> ; -> Boolean
<< `a, `b >>
<<
    a, b
    less-than?
    not
>>
`greater-than-equal?
define

<< Number >> ; -> Number
<< `degs >>
<<
    degs
    180
    divide
    pi
    multiply
>>
`degrees-to-radians
define

<< Number >> ; -> Number
<< `rads >>
<<
    rads
    pi
    divide
    180
    multiply
>>
`radians-to-degrees
define
Primitive Data Types:
 - Number (double)
 - String
 - Boolean
 - Substack

Forming data:
 - Number - literal numbers.
 - String - "text and other stuff, usual escape patterns."
 - Boolean - builtin values true and false
 - Substack - either:
   <<
   a
   b
   c
   >>
   
   OR
   
   substack
   value
   push
   
   OR

   substack
   substack
   append

Valid symbol:
 - not already taken, not a number, no quotes.

Required Hard-coded builtin commands
 - Numerical: +, negate, /
 - Logical: NOR
 - Comparison: <, >
 - String comparison: string=?, substring
 - Conditional: if
    if: * * Boolean -> *: either produces the first (true) or second (false) arguments depending on the third (boolean).
 - Conversion: number->string, others???
 - Expansion: define, eval
    define: string symbol -> : binds file found at string to symbol. If the symbol is entered, it is equivalent to invoking the funciton.
    eval: string -> **: takes file found at pwd + string, dumps to stack one at a time.
 - Basic interaction: drop, swap, duplicate
    rotate: ** * -> **: rotates stack above argument, up to that argument, by one.
 - Substack operations: empty, push, pop, empty?
    empty: -> substack: produces the empty substack

Standard library commands
 - Numerical: -, *, %
 - All numerical comparison, logical oeprators
 - 

Evaluation rules:
 - if a command is at the top of the stack, evaluate it, then update the user's stack display
 - if a value is at the top of the stack, wait.

Using NCurses for terminal stuff.

Example: max
duplicate
3 1 swap
duplicate
2 3 swap
>
if

Example: list sum
duplicate
empty?
"sum/bc"
"sum/rc"
3 1 swap
if
eval

sum/bc:
drop
0

sum/rc:
pop
2 1 swap
sum
+